Ver el video y contestar las preguntas

https://youtu.be/rU5153nki7c?si=pU8mFakb5GzLQJB8

Convierte las siguientes cadenas de fechas en objetos de fecha-hora utilizando funciones de lubridate.

fechas <- c("2025-03-28", "03/28/2025", "28-Mar-2025")
fechas_convertidas <- ??? # Usa la función adecuada de lubridate
print(fechas_convertidas)

Extrae el año, mes, día, hora, minuto y segundo del siguiente objeto de fecha-hora.

dt <- ymd_hms("2025-03-28 14:45:30")
anio <- ???   # Extraer el año
mes <- ???    # Extraer el mes
dia <- ???    # Extraer el día
hora <- ???   # Extraer la hora
minuto <- ??? # Extraer el minuto
segundo <- ??? # Extraer el segundo

print(c(anio, mes, dia, hora, minuto, segundo))

Modifica el siguiente objeto de fecha-hora cambiando el año a 2030, el mes a diciembre y el día a 25.

dt <- ymd_hms("2025-03-28 14:45:30")
dt <- ??? # Modificar el año
dt <- ??? # Modificar el mes
dt <- ??? # Modificar el día
print(dt)

Calcula el número de días entre dos fechas.

fecha1 <- ymd("2025-03-28")
fecha2 <- ymd("2030-12-25")
diferencia_dias <- ??? # Calcular la diferencia en días
print(diferencia_dias)

Crea una secuencia de fechas desde 2025-03-01 hasta 2025-03-31, aumentando de 2 en 2 días.

fecha_inicio <- ymd("2025-03-01")
fecha_fin <- ymd("2025-03-31")
secuencia_fechas <- ??? # Generar la secuencia
print(secuencia_fechas)

Determina si los años del 2020 al 2030 son bisiestos.

anios <- 2020:2030
bisiestos <- ??? # Verificar qué años son bisiestos
print(bisiestos)


A partir de "2025-03-28 14:45:30", suma 3 meses, resta 15 días y agrega 5 horas.

dt <- ymd_hms("2025-03-28 14:45:30")
dt <- ??? # Sumar 3 meses
dt <- ??? # Restar 15 días
dt <- ??? # Sumar 5 horas
print(dt)


Determina el nombre del día de la semana de las siguientes fechas: "2025-03-28", "2026-07-15", "2027-01-01".

fechas <- ymd(c("2025-03-28", "2026-07-15", "2027-01-01"))
dias_semana <- ??? # Obtener el nombre del día de la semana
print(dias_semana)


Convierte "2025-03-28 14:45:30" de la zona horaria "America/New_York" a "Europe/London".

Editar
dt <- ymd_hms("2025-03-28 14:45:30", tz = "America/New_York")
dt_londres <- ??? # Convertir a la hora de Londres
print(dt_londres)

Calcula la edad de una persona nacida el "1990-05-15" a la fecha "2025-03-28".

fecha_nacimiento <- ymd("1990-05-15")
fecha_referencia <- ymd("2025-03-28")
edad <- ??? # Calcular la edad
print(edad)

El dataset flights tiene las columnas year, month, day, hour y minute.
Crea una nueva columna departure_time en formato fecha-hora (POSIXct).

library(nycflights13)
library(lubridate)
library(dplyr)

flights <- flights %>%
  mutate(departure_time = ???) # Convierte a fecha-hora

head(flights$departure_time)


Extrae el año, mes, día, hora y minuto de la nueva columna departure_time y crea nuevas columnas con estos valores.

flights <- flights %>%
  mutate(
    dep_year = ???,  # Extraer el año
    dep_month = ???, # Extraer el mes
    dep_day = ???,   # Extraer el día
    dep_hour = ???,  # Extraer la hora
    dep_minute = ??? # Extraer los minutos
  )

head(flights[, c("departure_time", "dep_year", "dep_month", "dep_day", "dep_hour", "dep_minute")])

Las columnas dep_time y arr_time representan la hora de salida y llegada, y air_time indica el tiempo de vuelo en minutos.
Verifica si la diferencia entre arr_time y dep_time coincide con air_time.

flights <- flights %>%
  mutate(
    arrival_time = ???,  # Convertir arr_time a fecha-hora
    calculated_air_time = ??? # Calcular tiempo de vuelo
  )

head(flights[, c("departure_time", "arrival_time", "air_time", "calculated_air_time")])

Crea una nueva columna con el nombre del día de la semana en que salió el vuelo.

flights <- flights %>%
  mutate(weekday = ???) # Obtener el nombre del día de la semana

head(flights[, c("departure_time", "weekday")])

Filtra los vuelos que salieron un sábado o domingo.

weekend_flights <- flights %>%
  filter(???) # Condición para filtrar sábado y domingo

nrow(weekend_flights) # Contar los vuelos de fin de semana

Las columnas dep_delay y arr_delay muestran los retrasos en minutos.
Crea nuevas columnas con estos valores expresados en horas y minutos.

flights <- flights %>%
  mutate(
    dep_delay_hm = ???, # Convertir dep_delay a horas:minutos
    arr_delay_hm = ???  # Convertir arr_delay a horas:minutos
  )

head(flights[, c("dep_delay", "dep_delay_hm", "arr_delay", "arr_delay_hm")])

Filtra los vuelos que salieron entre las 10 PM y las 5 AM.

night_flights <- flights %>%
  filter(???)

nrow(night_flights) # Contar vuelos nocturnos

Agrupa por mes y calcula la duración promedio de los vuelos en minutos.

avg_flight_time <- flights %>%
  group_by(???) %>%
  summarize(avg_duration = ???)

print(avg_flight_time)

Simula un escenario donde todos los vuelos se retrasan 30 minutos.

flights <- flights %>%
  mutate(new_departure_time = ???) # Sumar 30 minutos

head(flights[, c("departure_time", "new_departure_time")])

Calcula cuántos días han pasado desde la fecha de cada vuelo hasta la fecha actual.

flights <- flights %>%
  mutate(days_since_flight = ???)

head(flights[, c("departure_time", "days_since_flight")])
