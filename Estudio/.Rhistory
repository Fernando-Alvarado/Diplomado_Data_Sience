a = 100
print(a)
# Ejemplo de indentación y uso de dos puntos
x = 5
if x > 0:
print("x es positivo")
print("Esto también está dentro del if")
print("Esto ya está fuera del if")
# Entero
edad = 25
print(type(edad))  # <class 'int'>
# Flotante
peso = 70.5
print(type(peso))  # <class 'float'>
a = 10
b = 3
print(a + b)  # Suma
print(a - b)  # Resta
print(a * b)  # Multiplicación
print(a / b)  # División (resultado float)
print(a // b) # División entera
print(a % b)  # Módulo
print(a ** b) # Potencia
palabra = "Python"
print(palabra[0])  # P
print(palabra[-1]) # n
print(palabra[1:3])  # yt
# Resultado de una comparación
mayor = 5 > 3
print(mayor)         # True
print(type(mayor))   # <class 'bool'>
a = True
b = False
print(a and b)  # False
print(a or b)   # True
print(not a)    # False
x = 5
nombre = "Ana"
pi = 3.1416
area = pi * (5 ** 2)
print("Área del círculo:", area)
x = 10
y = 5
print(x == y)
print(x != y)
print(x > y)
print(x < y)
print(x >= y)
print(x <= y)
a = True
b = False
print(a and b)
print(a or b)
print(not a)
edad = 18
if edad >= 18:
print("Eres mayor de edad")
elif edad >= 13:
print("Eres adolescente")
else:
print("Eres menor de edad")
for i in range(5):
print("Número:", i)
frutas = ["manzana", "plátano", "uva"]
for fruta in frutas:
print(fruta)
x = 0
while x < 3:
print("x vale:", x)
x += 1
for i in range(10):
if i == 5:
break
print(i)  # Imprime del 0 al 4
for i in range(5):
if i == 2:
continue
print(i)  # Imprime 0, 1, 3, 4 (salta el 2)
numeros = {1, 2, 3, 2, 1}
print(numeros)  # {1, 2, 3}
# Operaciones de conjuntos
pares = {2, 4, 6}
print(numeros & pares)   # Intersección: {2}
print(numeros | pares)   # Unión: {1, 2, 3, 4, 6}
edad = 18
if edad >= 18:
print("Eres mayor de edad")
elif edad >= 13:
print("Eres adolescente")
else:
print("Eres menor de edad")
import pandas as pd
data = {
"Nombre": ["Ana", "Luis", "Marta"],
"Edad": [23, 35, 29],
"Ciudad": ["CDMX", "Monterrey", "Guadalajara"]
}
df = pd.DataFrame(data)
print(df)
print(df["Edad"])       # Acceder a una columna
print(df.iloc[0])       # Acceder a la primera fila
print(df.shape)         # Dimensiones
import numpy as np
matriz = np.array([[1, 2, 3],
[4, 5, 6]])
print(matriz)
print(matriz.shape)     # Dimensiones
print(matriz[1, 2])     # Elemento fila 2, columna 3
import pandas as pd
data = {
"Nombre": ["Ana", "Luis", "Marta"],
"Edad": [23, 35, 29],
"Ciudad": ["CDMX", "Monterrey", "Guadalajara"]
}
df = pd.DataFrame(data)
print(df)
print(df["Edad"])       # Acceder a una columna
print(df.iloc[0])       # Acceder a la primera fila
print(df.shape)         # Dimensiones
import pandas as pd
data = {
"Nombre": ["Ana", "Luis", "Marta"],
"Edad": [23, 35, 29],
"Ciudad": ["CDMX", "Monterrey", "Guadalajara"]
}
df = pd.DataFrame(data)
print(df)
print(df["Edad"])       # Acceder a una columna
print(df.iloc[0])       # Acceder a la primera fila
print(df.shape)         # Dimensiones
import pandas as pd
data = {
"Nombre": ["Ana", "Luis", "Marta"],
"Edad": [23, 35, 29],
"Ciudad": ["CDMX", "Monterrey", "Guadalajara"]
}
df = pd.DataFrame(data)
print(df)
print(df["Edad"])       # Acceder a una columna
print(df.iloc[0])       # Acceder a la primera fila
print(df.shape)         # Dimensiones
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
## Ejemplo sencillo con palmerpenguins
library(ggplot2)
library(dplyr)
library(palmerpenguins)
# Usamos el dataset 'penguins' incluido en el paquete
datos <- penguins |> filter(!is.na(body_mass_g), !is.na(flipper_length_mm))
# Creamos una gráfica de dispersión básica
ggplot(datos, aes(x = body_mass_g, y = flipper_length_mm)) +
geom_point(color = "steelblue") +
labs(title = "Relación entre masa corporal y longitud del ala",
x = "Masa corporal (g)",
y = "Longitud del ala (mm)") +
theme_minimal()
# Ordenar por la columna length de menor a mayor
datos %>% arrange(length)
# Ordenar por la columna length de menor a mayor
datos <- pinguins
## Ejemplo sencillo con palmerpenguins
library(ggplot2)
library(dplyr)
library(palmerpenguins)
# Usamos el dataset 'penguins' incluido en el paquete
datos <- penguins |> filter(!is.na(body_mass_g), !is.na(flipper_length_mm))
# Creamos una gráfica de dispersión básica
ggplot(datos, aes(x = body_mass_g, y = flipper_length_mm)) +
geom_point(color = "steelblue") +
labs(title = "Relación entre masa corporal y longitud del ala",
x = "Masa corporal (g)",
y = "Longitud del ala (mm)") +
theme_minimal()
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- pinguins
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- penguins
datos %>% arrange(length)
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- penguins$species
datos %>% arrange(length)
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- penguins$body_mass_g
datos %>% arrange(length)
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- penguins
datos %>% arrange(length)
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- penguins
datos %>% arrange(datos$flipper_length_mm )
# Ordenar alfabéticamente por título (columna de tipo texto)
datos %>% arrange(title)
# Ordenar por la columna length de menor a mayor
library(palmerpenguins)
datos <- penguins
datos %>% arrange(datos$flipper_length_mm )
# Ordenar alfabéticamente por título (columna de tipo texto)
datos %>% arrange(datos$species)
# Ordenar de mayor a menor por la columna length
datos %>% arrange(desc(datos$flipper_length_mm)) %>% head()
data(iris)
data(iris)
iris
library(palmerpenguins)
datos <- penguins
# Selección por nombre explícito
iris %>% select(Species, Sepal.Length, Sepal.Width)
# Selección por rango de columnas
datos %>% select(Sepal.Length:Petal.Length)
# Selección por nombre explícito
iris %>% select(Species, Sepal.Length, Sepal.Width)
# Selección por rango de columnas
iris %>% select(Sepal.Length:Petal.Length)
# Eliminar columnas con el operador negativo
iris %>% select(-Species)
iris %>% select(-Sepal.Width, -Petal.Length)
iris %>% select(-(Sepal.Width:Petal.Length))
# Selección por nombre explícito
iris %>% select(Species, Sepal.Length, Sepal.Width) |> head()
# Selección por rango de columnas
iris %>% select(Sepal.Length:Petal.Length) |> head()
# Eliminar columnas con el operador negativo
iris %>% select(-Species) |> head()
iris %>% select(-Sepal.Width, -Petal.Length) |> head()
iris %>% select(-(Sepal.Width:Petal.Length)) |> head()
library(dplyr)
datos <- iris
# columnas que empiezan con "Sepal"
datos %>% select(starts_with("Sepal"))
# columnas que terminan con "Width"
datos %>% select(ends_with("Width"))
# columnas que contienen la letra "e"
datos %>% select(contains("e"))
# ⚠️ num_range() requiere columnas como r1, r2, r3, etc.
# Este ejemplo no aplica a iris, pero se muestra como referencia:
# select(num_range("r", 2:5))
# última columna del dataframe
datos %>% select(last_col())
# Ver valores únicos de la columna Species
datos %>% select(Species) %>% unique()
# Ordenar los valores únicos (aunque en iris ya están ordenados)
datos %>% select(Species) %>% unique() %>% arrange(Species)
# Mostrar las 10 observaciones con los valores más altos de Sepal.Length
datos %>% top_n(10, wt = Sepal.Length)
library(dplyr)
datos <- iris
# columnas que empiezan con "Sepal"
datos %>% select(starts_with("Sepal")) |> head()
# columnas que terminan con "Width"
datos %>% select(ends_with("Width")) |> head()
# columnas que contienen la letra "e"
datos %>% select(contains("e")) |> head()
# ⚠️ num_range() requiere columnas como r1, r2, r3, etc.
# Este ejemplo no aplica a iris, pero se muestra como referencia:
# select(num_range("r", 2:5))
# última columna del dataframe
datos %>% select(last_col()) |> head()
# Ver valores únicos de la columna Species
datos %>% select(Species) %>% unique() |> head()
# Ordenar los valores únicos (aunque en iris ya están ordenados)
datos %>% select(Species) %>% unique() %>% arrange(Species) |> head()
# Mostrar las 10 observaciones con los valores más altos de Sepal.Length
datos %>% top_n(10, wt = Sepal.Length) |> head()
library(dplyr)
datos <- iris
# Filtrar todas las flores cuya especie sea "setosa"
datos %>% filter(Species == "setosa")
# Filtrar flores con largo de pétalo mayor a 5
datos %>% filter(Petal.Length > 5)
# Condición combinada: Species = virginica Y ancho del sépalo > 3
datos %>% filter(Species == "virginica" & Sepal.Width > 3)
# Usando %in% para múltiples valores
datos %>% filter(Species %in% c("versicolor", "virginica"))
library(ggplot2)
datos %>%
filter(Species %in% c("versicolor", "virginica")) %>%
ggplot(aes(x = Petal.Length, y = Petal.Width, color = Species)) +
geom_point() +
labs(title = "Comparación entre versicolor y virginica") +
theme_minimal()
library(dplyr)
datos <- iris
# Filtrar todas las flores cuya especie sea "setosa"
datos %>% filter(Species == "setosa") |> head()
# Filtrar flores con largo de pétalo mayor a 5
datos %>% filter(Petal.Length > 5) |> head()
# Condición combinada: Species = virginica Y ancho del sépalo > 3
datos %>% filter(Species == "virginica" & Sepal.Width > 3) |> head()
# Usando %in% para múltiples valores
datos %>% filter(Species %in% c("versicolor", "virginica")) |> head()
# Promedio de largo de pétalo por especie
datos %>%
group_by(Species) %>%
summarise(promedio_petal_length = mean(Petal.Length))
# Promedio y desviación estándar del ancho del sépalo por especie
datos %>%
group_by(Species) %>%
summarise(
promedio_sepal_width = mean(Sepal.Width),
desviacion_sepal_width = sd(Sepal.Width)
)
# Promedio del largo de pétalo por especie
datos %>%
group_by(Species) %>%
summarise(promedio_petal_length = mean(Petal.Length))
# Cálculo de promedio y mediana por especie
datos %>%
group_by(Species) %>%
summarise(
media_largo_sepalo = mean(Sepal.Length),
mediana_largo_sepalo = median(Sepal.Length)
)
# Contar cuántas observaciones hay por especie
datos %>%
group_by(Species) %>%
summarise(total = n())
# Crear una columna llamada "doble_petal_length"
datos %>%
mutate(doble_petal_length = Petal.Length * 2)
# Crear una columna llamada "doble_petal_length"
datos %>%
mutate(doble_petal_length = Petal.Length * 2) |> head(n=10)
# Crear columnas con área del pétalo y largo total (sépalo + pétalo)
datos %>%
mutate(
area_petal = Petal.Length * Petal.Width,
total_length = Petal.Length + Sepal.Length
)
# Crear columnas con área del pétalo y largo total (sépalo + pétalo)
datos %>%
mutate(
area_petal = Petal.Length * Petal.Width,
total_length = Petal.Length + Sepal.Length
) |> head(n=10)
library(ggplot2)
library(patchwork)
library(dplyr)
library(palmerpenguins)
datos <- penguins %>% filter(!is.na(body_mass_g), !is.na(flipper_length_mm))
graf1 <- datos %>%
ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
geom_point(color = "red", shape = 18, size = 2) +
labs(x = "Masa corporal (g)", y = "Longitud del ala (mm)") +
theme_light()
graf2 <- datos %>%
ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
geom_point(color = "purple", shape = 18, size = 2) +
theme_gray()
# Lado a lado
graf1 + graf2
# Una arriba de la otra
graf1 / graf2
# Tercer gráfica y composición combinada
graf3 <- datos %>%
ggplot(aes(x = body_mass_g, y = flipper_length_mm)) +
geom_line(color = "orange") +
labs(x = "Masa corporal (g)", y = "Longitud del ala (mm)") +
theme_minimal()
# Composición personalizada
(graf1 | graf2) / graf3
case_when(
x == 1 ~ "uno",
x == 2 ~ "dos",
TRUE   ~ "otro"
)
medallas <- c(1,1,1,3,3,3,3,1,2,NA,NA,2,2,1,4)
# 1 = oro
# 2 = plata
# 3 = bronce
dplyr::case_when(
medallas == 1 ~ "oro",
medallas == 2 ~ "plata",
medallas == 3 ~ "bronce"
)
dplyr::case_when(
medallas == 1 ~ "oro",
medallas == 2 ~ "plata",
medallas == 3 ~ "bronce",
medallas > 3 ~ "error de registro"
)
# Función con un argumento obligatorio y uno con valor por defecto
mi_funcion_lazy <- function(nombre, pais = "México") {
paste("Mi nombre es", nombre, "y soy de", pais)
}
# Función con un argumento obligatorio y uno con valor por defecto
mi_funcion_lazy <- function(nombre, pais = "México") {
paste("Mi nombre es", nombre, "y soy de", pais)
}
# Solo se proporciona el argumento obligatorio
mi_funcion_lazy("Eduardo")
# Se proporcionan ambos argumentos
mi_funcion_lazy(nombre = "Eduardo", pais = "España")
mi_funcion_lazy(pais = "España", nombre = "Eduardo")
getwd()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
getwd()
setwd("C:/Users/ferna/Documents/Diplomado_Data_Sience/Estudio")
getwd()
rmarkdown::render("Modulo_1.Rmd")
